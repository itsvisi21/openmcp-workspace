{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 4}, "tests": {"0": {"status": "ERROR", "message": "self = UUID()\nvisitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90>\nkw = {'type_expression': Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=CallableColumnDefault(<function uuid4 at 0x00000186AF5EE480>))}\n\n    def _compiler_dispatch(\n        self: Visitable, visitor: Any, **kw: Any\n    ) -> str:\n        \"\"\"Look for an attribute named \"visit_<visit_name>\" on the\n        visitor, and call it with the same kw params.\n    \n        \"\"\"\n        try:\n>           meth = getter(visitor)\nE           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_UUID'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:139: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x00000186B1053950>\ncreate = <sqlalchemy.sql.ddl.CreateTable object at 0x00000186B0F9EB90>, kw = {}\ntable = Table('contexts', MetaData(), Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=Callabl...at 0x00000186B075C9A0>), default=CallableColumnDefault(<function datetime.utcnow at 0x00000186B0743D80>)), schema=None)\npreparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x00000186B09C3790>\ntext = '\\nCREATE TABLE contexts (', create_table_suffix = '', separator = '\\n', first_pk = False\ncreate_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x00000186B0F9EC50>\n\n    def visit_create_table(self, create, **kw):\n        table = create.element\n        preparer = self.preparer\n    \n        text = \"\\nCREATE \"\n        if table._prefixes:\n            text += \" \".join(table._prefixes) + \" \"\n    \n        text += \"TABLE \"\n        if create.if_not_exists:\n            text += \"IF NOT EXISTS \"\n    \n        text += preparer.format_table(table) + \" \"\n    \n        create_table_suffix = self.create_table_suffix(table)\n        if create_table_suffix:\n            text += create_table_suffix + \" \"\n    \n        text += \"(\"\n    \n        separator = \"\\n\"\n    \n        # if only one primary key, specify it along with the column\n        first_pk = False\n        for create_column in create.columns:\n            column = create_column.element\n            try:\n>               processed = self.process(\n                    create_column, first_pk=column.primary_key and not first_pk\n                )\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6487: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:912: in process\n    return obj._compiler_dispatch(self, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:143: in _compiler_dispatch\n    return meth(self, **kw)  # type: ignore  # noqa: E501\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6518: in visit_create_column\n    text = self.get_column_specification(column, first_pk=first_pk)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py:1534: in get_column_specification\n    coltype = self.dialect.type_compiler_instance.process(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:957: in process\n    return type_._compiler_dispatch(self, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:141: in _compiler_dispatch\n    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90>\nelement = UUID()\nerr = AttributeError(\"'SQLiteTypeCompiler' object has no attribute 'visit_UUID'\")\nkw = {'type_expression': Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=CallableColumnDefault(<function uuid4 at 0x00000186AF5EE480>))}\n\n    def visit_unsupported_compilation(\n        self, element: Any, err: Exception, **kw: Any\n    ) -> NoReturn:\n>       raise exc.UnsupportedCompilationError(self, element) from err\nE       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90> can't render element of type UUID (Background on this error at: https://sqlalche.me/e/20/l7de)\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:962: UnsupportedCompilationError\n\nThe above exception was the direct cause of the following exception:\n\ndb_url = 'sqlite:///./test.db'\n\n    @pytest.fixture(scope=\"session\")\n    def engine(db_url):\n        \"\"\"Create test database engine.\"\"\"\n        engine = create_engine(db_url)\n>       Base.metadata.create_all(bind=engine)\n\ntests\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py:5828: in create_all\n    bind._run_ddl_visitor(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3243: in _run_ddl_visitor\n    conn._run_ddl_visitor(visitorcallable, element, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2447: in _run_ddl_visitor\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:671: in traverse_single\n    return meth(obj, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:919: in visit_metadata\n    self.traverse_single(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:671: in traverse_single\n    return meth(obj, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:957: in visit_table\n    )._invoke_with(self.connection)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:315: in _invoke_with\n    return bind.execute(self)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1416: in execute\n    return meth(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:181: in _execute_on_connection\n    return connection._execute_ddl(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1525: in _execute_ddl\n    compiled = ddl.compile(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:308: in compile\n    return self._compiler(dialect, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:69: in _compiler\n    return dialect.ddl_compiler(dialect, self, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:867: in __init__\n    self.string = self.process(self.statement, **compile_kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:912: in process\n    return obj._compiler_dispatch(self, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:143: in _compiler_dispatch\n    return meth(self, **kw)  # type: ignore  # noqa: E501\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x00000186B1053950>\ncreate = <sqlalchemy.sql.ddl.CreateTable object at 0x00000186B0F9EB90>, kw = {}\ntable = Table('contexts', MetaData(), Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=Callabl...at 0x00000186B075C9A0>), default=CallableColumnDefault(<function datetime.utcnow at 0x00000186B0743D80>)), schema=None)\npreparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x00000186B09C3790>\ntext = '\\nCREATE TABLE contexts (', create_table_suffix = '', separator = '\\n', first_pk = False\ncreate_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x00000186B0F9EC50>\n\n    def visit_create_table(self, create, **kw):\n        table = create.element\n        preparer = self.preparer\n    \n        text = \"\\nCREATE \"\n        if table._prefixes:\n            text += \" \".join(table._prefixes) + \" \"\n    \n        text += \"TABLE \"\n        if create.if_not_exists:\n            text += \"IF NOT EXISTS \"\n    \n        text += preparer.format_table(table) + \" \"\n    \n        create_table_suffix = self.create_table_suffix(table)\n        if create_table_suffix:\n            text += create_table_suffix + \" \"\n    \n        text += \"(\"\n    \n        separator = \"\\n\"\n    \n        # if only one primary key, specify it along with the column\n        first_pk = False\n        for create_column in create.columns:\n            column = create_column.element\n            try:\n                processed = self.process(\n                    create_column, first_pk=column.primary_key and not first_pk\n                )\n                if processed is not None:\n                    text += separator\n                    separator = \", \\n\"\n                    text += \"\\t\" + processed\n                if column.primary_key:\n                    first_pk = True\n            except exc.CompileError as ce:\n>               raise exc.CompileError(\n                    \"(in table '%s', column '%s'): %s\"\n                    % (table.description, column.name, ce.args[0])\n                ) from ce\nE               sqlalchemy.exc.CompileError: (in table 'contexts', column 'id'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90> can't render element of type UUID\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6497: CompileError\n", "test_name": "test_create_context", "rerun": "0"}, "1": {"status": "ERROR", "message": "self = UUID()\nvisitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90>\nkw = {'type_expression': Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=CallableColumnDefault(<function uuid4 at 0x00000186AF5EE480>))}\n\n    def _compiler_dispatch(\n        self: Visitable, visitor: Any, **kw: Any\n    ) -> str:\n        \"\"\"Look for an attribute named \"visit_<visit_name>\" on the\n        visitor, and call it with the same kw params.\n    \n        \"\"\"\n        try:\n>           meth = getter(visitor)\nE           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_UUID'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:139: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x00000186B1053950>\ncreate = <sqlalchemy.sql.ddl.CreateTable object at 0x00000186B0F9EB90>, kw = {}\ntable = Table('contexts', MetaData(), Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=Callabl...at 0x00000186B075C9A0>), default=CallableColumnDefault(<function datetime.utcnow at 0x00000186B0743D80>)), schema=None)\npreparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x00000186B09C3790>\ntext = '\\nCREATE TABLE contexts (', create_table_suffix = '', separator = '\\n', first_pk = False\ncreate_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x00000186B0F9EC50>\n\n    def visit_create_table(self, create, **kw):\n        table = create.element\n        preparer = self.preparer\n    \n        text = \"\\nCREATE \"\n        if table._prefixes:\n            text += \" \".join(table._prefixes) + \" \"\n    \n        text += \"TABLE \"\n        if create.if_not_exists:\n            text += \"IF NOT EXISTS \"\n    \n        text += preparer.format_table(table) + \" \"\n    \n        create_table_suffix = self.create_table_suffix(table)\n        if create_table_suffix:\n            text += create_table_suffix + \" \"\n    \n        text += \"(\"\n    \n        separator = \"\\n\"\n    \n        # if only one primary key, specify it along with the column\n        first_pk = False\n        for create_column in create.columns:\n            column = create_column.element\n            try:\n>               processed = self.process(\n                    create_column, first_pk=column.primary_key and not first_pk\n                )\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6487: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:912: in process\n    return obj._compiler_dispatch(self, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:143: in _compiler_dispatch\n    return meth(self, **kw)  # type: ignore  # noqa: E501\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6518: in visit_create_column\n    text = self.get_column_specification(column, first_pk=first_pk)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py:1534: in get_column_specification\n    coltype = self.dialect.type_compiler_instance.process(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:957: in process\n    return type_._compiler_dispatch(self, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:141: in _compiler_dispatch\n    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90>\nelement = UUID()\nerr = AttributeError(\"'SQLiteTypeCompiler' object has no attribute 'visit_UUID'\")\nkw = {'type_expression': Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=CallableColumnDefault(<function uuid4 at 0x00000186AF5EE480>))}\n\n    def visit_unsupported_compilation(\n        self, element: Any, err: Exception, **kw: Any\n    ) -> NoReturn:\n>       raise exc.UnsupportedCompilationError(self, element) from err\nE       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90> can't render element of type UUID (Background on this error at: https://sqlalche.me/e/20/l7de)\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:962: UnsupportedCompilationError\n\nThe above exception was the direct cause of the following exception:\n\ndb_url = 'sqlite:///./test.db'\n\n    @pytest.fixture(scope=\"session\")\n    def engine(db_url):\n        \"\"\"Create test database engine.\"\"\"\n        engine = create_engine(db_url)\n>       Base.metadata.create_all(bind=engine)\n\ntests\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py:5828: in create_all\n    bind._run_ddl_visitor(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3243: in _run_ddl_visitor\n    conn._run_ddl_visitor(visitorcallable, element, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2447: in _run_ddl_visitor\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:671: in traverse_single\n    return meth(obj, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:919: in visit_metadata\n    self.traverse_single(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:671: in traverse_single\n    return meth(obj, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:957: in visit_table\n    )._invoke_with(self.connection)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:315: in _invoke_with\n    return bind.execute(self)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1416: in execute\n    return meth(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:181: in _execute_on_connection\n    return connection._execute_ddl(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1525: in _execute_ddl\n    compiled = ddl.compile(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:308: in compile\n    return self._compiler(dialect, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:69: in _compiler\n    return dialect.ddl_compiler(dialect, self, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:867: in __init__\n    self.string = self.process(self.statement, **compile_kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:912: in process\n    return obj._compiler_dispatch(self, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:143: in _compiler_dispatch\n    return meth(self, **kw)  # type: ignore  # noqa: E501\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x00000186B1053950>\ncreate = <sqlalchemy.sql.ddl.CreateTable object at 0x00000186B0F9EB90>, kw = {}\ntable = Table('contexts', MetaData(), Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=Callabl...at 0x00000186B075C9A0>), default=CallableColumnDefault(<function datetime.utcnow at 0x00000186B0743D80>)), schema=None)\npreparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x00000186B09C3790>\ntext = '\\nCREATE TABLE contexts (', create_table_suffix = '', separator = '\\n', first_pk = False\ncreate_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x00000186B0F9EC50>\n\n    def visit_create_table(self, create, **kw):\n        table = create.element\n        preparer = self.preparer\n    \n        text = \"\\nCREATE \"\n        if table._prefixes:\n            text += \" \".join(table._prefixes) + \" \"\n    \n        text += \"TABLE \"\n        if create.if_not_exists:\n            text += \"IF NOT EXISTS \"\n    \n        text += preparer.format_table(table) + \" \"\n    \n        create_table_suffix = self.create_table_suffix(table)\n        if create_table_suffix:\n            text += create_table_suffix + \" \"\n    \n        text += \"(\"\n    \n        separator = \"\\n\"\n    \n        # if only one primary key, specify it along with the column\n        first_pk = False\n        for create_column in create.columns:\n            column = create_column.element\n            try:\n                processed = self.process(\n                    create_column, first_pk=column.primary_key and not first_pk\n                )\n                if processed is not None:\n                    text += separator\n                    separator = \", \\n\"\n                    text += \"\\t\" + processed\n                if column.primary_key:\n                    first_pk = True\n            except exc.CompileError as ce:\n>               raise exc.CompileError(\n                    \"(in table '%s', column '%s'): %s\"\n                    % (table.description, column.name, ce.args[0])\n                ) from ce\nE               sqlalchemy.exc.CompileError: (in table 'contexts', column 'id'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90> can't render element of type UUID\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6497: CompileError\n", "test_name": "test_list_contexts", "rerun": "0"}, "2": {"status": "ERROR", "message": "self = UUID()\nvisitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90>\nkw = {'type_expression': Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=CallableColumnDefault(<function uuid4 at 0x00000186AF5EE480>))}\n\n    def _compiler_dispatch(\n        self: Visitable, visitor: Any, **kw: Any\n    ) -> str:\n        \"\"\"Look for an attribute named \"visit_<visit_name>\" on the\n        visitor, and call it with the same kw params.\n    \n        \"\"\"\n        try:\n>           meth = getter(visitor)\nE           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_UUID'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:139: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x00000186B1053950>\ncreate = <sqlalchemy.sql.ddl.CreateTable object at 0x00000186B0F9EB90>, kw = {}\ntable = Table('contexts', MetaData(), Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=Callabl...at 0x00000186B075C9A0>), default=CallableColumnDefault(<function datetime.utcnow at 0x00000186B0743D80>)), schema=None)\npreparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x00000186B09C3790>\ntext = '\\nCREATE TABLE contexts (', create_table_suffix = '', separator = '\\n', first_pk = False\ncreate_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x00000186B0F9EC50>\n\n    def visit_create_table(self, create, **kw):\n        table = create.element\n        preparer = self.preparer\n    \n        text = \"\\nCREATE \"\n        if table._prefixes:\n            text += \" \".join(table._prefixes) + \" \"\n    \n        text += \"TABLE \"\n        if create.if_not_exists:\n            text += \"IF NOT EXISTS \"\n    \n        text += preparer.format_table(table) + \" \"\n    \n        create_table_suffix = self.create_table_suffix(table)\n        if create_table_suffix:\n            text += create_table_suffix + \" \"\n    \n        text += \"(\"\n    \n        separator = \"\\n\"\n    \n        # if only one primary key, specify it along with the column\n        first_pk = False\n        for create_column in create.columns:\n            column = create_column.element\n            try:\n>               processed = self.process(\n                    create_column, first_pk=column.primary_key and not first_pk\n                )\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6487: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:912: in process\n    return obj._compiler_dispatch(self, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:143: in _compiler_dispatch\n    return meth(self, **kw)  # type: ignore  # noqa: E501\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6518: in visit_create_column\n    text = self.get_column_specification(column, first_pk=first_pk)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py:1534: in get_column_specification\n    coltype = self.dialect.type_compiler_instance.process(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:957: in process\n    return type_._compiler_dispatch(self, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:141: in _compiler_dispatch\n    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90>\nelement = UUID()\nerr = AttributeError(\"'SQLiteTypeCompiler' object has no attribute 'visit_UUID'\")\nkw = {'type_expression': Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=CallableColumnDefault(<function uuid4 at 0x00000186AF5EE480>))}\n\n    def visit_unsupported_compilation(\n        self, element: Any, err: Exception, **kw: Any\n    ) -> NoReturn:\n>       raise exc.UnsupportedCompilationError(self, element) from err\nE       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90> can't render element of type UUID (Background on this error at: https://sqlalche.me/e/20/l7de)\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:962: UnsupportedCompilationError\n\nThe above exception was the direct cause of the following exception:\n\ndb_url = 'sqlite:///./test.db'\n\n    @pytest.fixture(scope=\"session\")\n    def engine(db_url):\n        \"\"\"Create test database engine.\"\"\"\n        engine = create_engine(db_url)\n>       Base.metadata.create_all(bind=engine)\n\ntests\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py:5828: in create_all\n    bind._run_ddl_visitor(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3243: in _run_ddl_visitor\n    conn._run_ddl_visitor(visitorcallable, element, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2447: in _run_ddl_visitor\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:671: in traverse_single\n    return meth(obj, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:919: in visit_metadata\n    self.traverse_single(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:671: in traverse_single\n    return meth(obj, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:957: in visit_table\n    )._invoke_with(self.connection)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:315: in _invoke_with\n    return bind.execute(self)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1416: in execute\n    return meth(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:181: in _execute_on_connection\n    return connection._execute_ddl(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1525: in _execute_ddl\n    compiled = ddl.compile(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:308: in compile\n    return self._compiler(dialect, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:69: in _compiler\n    return dialect.ddl_compiler(dialect, self, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:867: in __init__\n    self.string = self.process(self.statement, **compile_kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:912: in process\n    return obj._compiler_dispatch(self, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:143: in _compiler_dispatch\n    return meth(self, **kw)  # type: ignore  # noqa: E501\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x00000186B1053950>\ncreate = <sqlalchemy.sql.ddl.CreateTable object at 0x00000186B0F9EB90>, kw = {}\ntable = Table('contexts', MetaData(), Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=Callabl...at 0x00000186B075C9A0>), default=CallableColumnDefault(<function datetime.utcnow at 0x00000186B0743D80>)), schema=None)\npreparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x00000186B09C3790>\ntext = '\\nCREATE TABLE contexts (', create_table_suffix = '', separator = '\\n', first_pk = False\ncreate_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x00000186B0F9EC50>\n\n    def visit_create_table(self, create, **kw):\n        table = create.element\n        preparer = self.preparer\n    \n        text = \"\\nCREATE \"\n        if table._prefixes:\n            text += \" \".join(table._prefixes) + \" \"\n    \n        text += \"TABLE \"\n        if create.if_not_exists:\n            text += \"IF NOT EXISTS \"\n    \n        text += preparer.format_table(table) + \" \"\n    \n        create_table_suffix = self.create_table_suffix(table)\n        if create_table_suffix:\n            text += create_table_suffix + \" \"\n    \n        text += \"(\"\n    \n        separator = \"\\n\"\n    \n        # if only one primary key, specify it along with the column\n        first_pk = False\n        for create_column in create.columns:\n            column = create_column.element\n            try:\n                processed = self.process(\n                    create_column, first_pk=column.primary_key and not first_pk\n                )\n                if processed is not None:\n                    text += separator\n                    separator = \", \\n\"\n                    text += \"\\t\" + processed\n                if column.primary_key:\n                    first_pk = True\n            except exc.CompileError as ce:\n>               raise exc.CompileError(\n                    \"(in table '%s', column '%s'): %s\"\n                    % (table.description, column.name, ce.args[0])\n                ) from ce\nE               sqlalchemy.exc.CompileError: (in table 'contexts', column 'id'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90> can't render element of type UUID\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6497: CompileError\n", "test_name": "test_get_context", "rerun": "0"}, "3": {"status": "ERROR", "message": "self = UUID()\nvisitor = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90>\nkw = {'type_expression': Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=CallableColumnDefault(<function uuid4 at 0x00000186AF5EE480>))}\n\n    def _compiler_dispatch(\n        self: Visitable, visitor: Any, **kw: Any\n    ) -> str:\n        \"\"\"Look for an attribute named \"visit_<visit_name>\" on the\n        visitor, and call it with the same kw params.\n    \n        \"\"\"\n        try:\n>           meth = getter(visitor)\nE           AttributeError: 'SQLiteTypeCompiler' object has no attribute 'visit_UUID'\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:139: AttributeError\n\nThe above exception was the direct cause of the following exception:\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x00000186B1053950>\ncreate = <sqlalchemy.sql.ddl.CreateTable object at 0x00000186B0F9EB90>, kw = {}\ntable = Table('contexts', MetaData(), Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=Callabl...at 0x00000186B075C9A0>), default=CallableColumnDefault(<function datetime.utcnow at 0x00000186B0743D80>)), schema=None)\npreparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x00000186B09C3790>\ntext = '\\nCREATE TABLE contexts (', create_table_suffix = '', separator = '\\n', first_pk = False\ncreate_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x00000186B0F9EC50>\n\n    def visit_create_table(self, create, **kw):\n        table = create.element\n        preparer = self.preparer\n    \n        text = \"\\nCREATE \"\n        if table._prefixes:\n            text += \" \".join(table._prefixes) + \" \"\n    \n        text += \"TABLE \"\n        if create.if_not_exists:\n            text += \"IF NOT EXISTS \"\n    \n        text += preparer.format_table(table) + \" \"\n    \n        create_table_suffix = self.create_table_suffix(table)\n        if create_table_suffix:\n            text += create_table_suffix + \" \"\n    \n        text += \"(\"\n    \n        separator = \"\\n\"\n    \n        # if only one primary key, specify it along with the column\n        first_pk = False\n        for create_column in create.columns:\n            column = create_column.element\n            try:\n>               processed = self.process(\n                    create_column, first_pk=column.primary_key and not first_pk\n                )\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6487: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:912: in process\n    return obj._compiler_dispatch(self, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:143: in _compiler_dispatch\n    return meth(self, **kw)  # type: ignore  # noqa: E501\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6518: in visit_create_column\n    text = self.get_column_specification(column, first_pk=first_pk)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\dialects\\sqlite\\base.py:1534: in get_column_specification\n    coltype = self.dialect.type_compiler_instance.process(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:957: in process\n    return type_._compiler_dispatch(self, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:141: in _compiler_dispatch\n    return visitor.visit_unsupported_compilation(self, err, **kw)  # type: ignore  # noqa: E501\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90>\nelement = UUID()\nerr = AttributeError(\"'SQLiteTypeCompiler' object has no attribute 'visit_UUID'\")\nkw = {'type_expression': Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=CallableColumnDefault(<function uuid4 at 0x00000186AF5EE480>))}\n\n    def visit_unsupported_compilation(\n        self, element: Any, err: Exception, **kw: Any\n    ) -> NoReturn:\n>       raise exc.UnsupportedCompilationError(self, element) from err\nE       sqlalchemy.exc.UnsupportedCompilationError: Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90> can't render element of type UUID (Background on this error at: https://sqlalche.me/e/20/l7de)\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:962: UnsupportedCompilationError\n\nThe above exception was the direct cause of the following exception:\n\ndb_url = 'sqlite:///./test.db'\n\n    @pytest.fixture(scope=\"session\")\n    def engine(db_url):\n        \"\"\"Create test database engine.\"\"\"\n        engine = create_engine(db_url)\n>       Base.metadata.create_all(bind=engine)\n\ntests\\conftest.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\schema.py:5828: in create_all\n    bind._run_ddl_visitor(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3243: in _run_ddl_visitor\n    conn._run_ddl_visitor(visitorcallable, element, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2447: in _run_ddl_visitor\n    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:671: in traverse_single\n    return meth(obj, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:919: in visit_metadata\n    self.traverse_single(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:671: in traverse_single\n    return meth(obj, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:957: in visit_table\n    )._invoke_with(self.connection)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:315: in _invoke_with\n    return bind.execute(self)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1416: in execute\n    return meth(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:181: in _execute_on_connection\n    return connection._execute_ddl(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1525: in _execute_ddl\n    compiled = ddl.compile(\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:308: in compile\n    return self._compiler(dialect, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\ddl.py:69: in _compiler\n    return dialect.ddl_compiler(dialect, self, **kw)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:867: in __init__\n    self.string = self.process(self.statement, **compile_kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:912: in process\n    return obj._compiler_dispatch(self, **kwargs)\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\visitors.py:143: in _compiler_dispatch\n    return meth(self, **kw)  # type: ignore  # noqa: E501\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x00000186B1053950>\ncreate = <sqlalchemy.sql.ddl.CreateTable object at 0x00000186B0F9EB90>, kw = {}\ntable = Table('contexts', MetaData(), Column('id', UUID(), table=<contexts>, primary_key=True, nullable=False, default=Callabl...at 0x00000186B075C9A0>), default=CallableColumnDefault(<function datetime.utcnow at 0x00000186B0743D80>)), schema=None)\npreparer = <sqlalchemy.dialects.sqlite.base.SQLiteIdentifierPreparer object at 0x00000186B09C3790>\ntext = '\\nCREATE TABLE contexts (', create_table_suffix = '', separator = '\\n', first_pk = False\ncreate_column = <sqlalchemy.sql.ddl.CreateColumn object at 0x00000186B0F9EC50>\n\n    def visit_create_table(self, create, **kw):\n        table = create.element\n        preparer = self.preparer\n    \n        text = \"\\nCREATE \"\n        if table._prefixes:\n            text += \" \".join(table._prefixes) + \" \"\n    \n        text += \"TABLE \"\n        if create.if_not_exists:\n            text += \"IF NOT EXISTS \"\n    \n        text += preparer.format_table(table) + \" \"\n    \n        create_table_suffix = self.create_table_suffix(table)\n        if create_table_suffix:\n            text += create_table_suffix + \" \"\n    \n        text += \"(\"\n    \n        separator = \"\\n\"\n    \n        # if only one primary key, specify it along with the column\n        first_pk = False\n        for create_column in create.columns:\n            column = create_column.element\n            try:\n                processed = self.process(\n                    create_column, first_pk=column.primary_key and not first_pk\n                )\n                if processed is not None:\n                    text += separator\n                    separator = \", \\n\"\n                    text += \"\\t\" + processed\n                if column.primary_key:\n                    first_pk = True\n            except exc.CompileError as ce:\n>               raise exc.CompileError(\n                    \"(in table '%s', column '%s'): %s\"\n                    % (table.description, column.name, ce.args[0])\n                ) from ce\nE               sqlalchemy.exc.CompileError: (in table 'contexts', column 'id'): Compiler <sqlalchemy.dialects.sqlite.base.SQLiteTypeCompiler object at 0x00000186B101CF90> can't render element of type UUID\n\nC:\\Users\\550000247.HCAD\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sqlalchemy\\sql\\compiler.py:6497: CompileError\n", "test_name": "test_delete_context", "rerun": "0"}}, "suite_name": "tests/test_context.py"}}}, "date": "April 02, 2025", "start_time": 1743597267.8220572, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "4", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "4"}