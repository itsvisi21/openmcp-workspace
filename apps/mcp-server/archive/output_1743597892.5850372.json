{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 2, "total_error": 3}, "tests": {"0": {"status": "ERROR", "message": "file C:\\GEHC_Projects\\experiment\\openmcp-workspace\\apps\\mcp-server\\tests\\test_rpc.py, line 5\n  def test_commit_context(client: TestClient, mock_storage_service):\nE       fixture 'mock_storage_service' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, client, cov, deployer, doctest_namespace, extra, extras, include_metadata_in_junit_xml, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, requests_mock, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\nC:\\GEHC_Projects\\experiment\\openmcp-workspace\\apps\\mcp-server\\tests\\test_rpc.py:5\n", "test_name": "test_commit_context", "rerun": "0"}, "1": {"status": "ERROR", "message": "file C:\\GEHC_Projects\\experiment\\openmcp-workspace\\apps\\mcp-server\\tests\\test_rpc.py, line 29\n  def test_get_context(client: TestClient, mock_storage_service):\nE       fixture 'mock_storage_service' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, client, cov, deployer, doctest_namespace, extra, extras, include_metadata_in_junit_xml, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, requests_mock, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\nC:\\GEHC_Projects\\experiment\\openmcp-workspace\\apps\\mcp-server\\tests\\test_rpc.py:29\n", "test_name": "test_get_context", "rerun": "0"}, "2": {"status": "ERROR", "message": "file C:\\GEHC_Projects\\experiment\\openmcp-workspace\\apps\\mcp-server\\tests\\test_rpc.py, line 55\n  def test_process_context(client: TestClient, mock_llm_service):\nE       fixture 'mock_llm_service' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, client, cov, deployer, doctest_namespace, extra, extras, include_metadata_in_junit_xml, metadata, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, requests_mock, session_mocker, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\nC:\\GEHC_Projects\\experiment\\openmcp-workspace\\apps\\mcp-server\\tests\\test_rpc.py:55\n", "test_name": "test_process_context", "rerun": "0"}, "3": {"status": "FAIL", "message": "   assert 404 == 200\n    +  where 404 = <Response [404 Not Found]>.status_code\n", "test_name": "test_invalid_method", "rerun": "0"}, "4": {"status": "FAIL", "message": "           fastapi.exceptions.ResponseValidationError: 1 validation errors:\n             {'type': 'missing', 'loc': ('response', 'result'), 'msg': 'Field required', 'input': RPCError(jsonrpc='2.0', error={'code': -32601, 'message': 'Method not found: test'}, id='1')}\n", "test_name": "test_rpc_endpoint", "rerun": "0"}}, "suite_name": "tests/test_rpc.py"}}}, "date": "April 02, 2025", "start_time": 1743597787.5718606, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "2", "skip": "0", "error": "3", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "5"}