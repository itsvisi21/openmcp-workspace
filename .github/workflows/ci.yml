name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: openmcp_test
          POSTGRES_USER: openmcp
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r apps/backend/requirements.txt
        pip install -r apps/mcp-server/requirements.txt
        pip install pytest pytest-cov black isort

    - name: Install Node.js dependencies
      run: |
        cd apps/dashboard
        npm ci

    - name: Run Python tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: openmcp_test
        POSTGRES_USER: openmcp
        POSTGRES_PASSWORD: test_password
      run: |
        pytest apps/backend --cov=apps/backend --cov-report=xml
        pytest apps/mcp-server --cov=apps/mcp-server --cov-report=xml

    - name: Run Node.js tests
      run: |
        cd apps/dashboard
        npm test

    - name: Run linting
      run: |
        black --check apps/backend apps/mcp-server
        isort --check-only apps/backend apps/mcp-server
        cd apps/dashboard && npm run lint

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          openmcp/dashboard:latest
          openmcp/backend:latest
          openmcp/mcp-server:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: |
        echo "Deployment would happen here"
        # Add deployment steps based on your infrastructure 